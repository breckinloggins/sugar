=============================================================
TODO
=============================================================	
DEFMACRO SYNTAX SUPPORT:
	- Add eq-op.  Tests two items on the stack for equality.  Does nothing if true, pops to mark if false
	- Fix quote operator to allow nested quoting
	
TYPE SYSTEM:
	- Add overloaded method for all types that pop up to n-args off the stack and create a new value of that type (in other words, a data constructor for each type)
	- Add create-op: pops a type and a bunch of args (as needed by the type), and instantiates a new value for that type, pushing it on the stack, using that type's
		data constructor
	- Remove createmacro-op and replace with the above infrastructure
	- Define createmacro as the first macro
	- Create ProductType (takes one or more other types and represents a tuple of those types)
	- Create SumType (takes one or more types and represents any of those types, but not multiple at once)
	- Define the Any type, which represents any type that ISN'T null
	- Define the All type, which represents any type including null
	- In the prelude, create the Bool type, such that:
		True :: Any
		False :: Null
		Bool :: True | False


=============================================================
RESEARCH/THOUGHTS/BACKLOG:
=============================================================

- Support of some primitives to enable richer syntax
	- Want to be able to define a macro that lets FURTHER macros be defined like
		defmacro foo
		(
			some
			macro
			stuff
		)
	- For this to work, defmacro would have to be a reader that:
		1. Read a symbol declaring the name of the macro
		2. Read in a list
		3. Quoted each item in the list, pushing it onto the stack
		4. Called createmacro
		5. Pushed the name symbol onto the stack
		6. Called set
	- But I don't know if I'm quite ready to add lists to the language yet, so can
	we replace that logic with something else?
	- We could define a reader that:
		1. Took a symbol (any symbol)
		2. Read, quoted, and pushed any symbol that wasn't the first symbol read
	- But even this might be too specific.  We could also define a reader that:
		1. Read a symbol representing the start symbol
		2. Read a symbol representing the end symbol
		1. Read a symbol representing an op or macro
		2. Read the start symbol
		3. Read each symbol in a loop (not the end symbol) applying the macro or op in turn
		(Kind of like mapping over a list in Haskell) 
	- I like this approach, but what would we need to define it in Sugar itself?
		`pushdictionary
		`symbol `read `_start `set	- Read the desired start symbol -
		`symbol `read `_end `set	- Read the desired end symbol -
		`symbol `read `_f `set		- Read the op or macro to apply to each read symbol -
		`_start `expect				- Wait to read the start symbol -
		`mark						- Where we'll loop back to -
		`read `_sym `set			- Read a symbol - 
		`_sym `_f					- Operate on it -
		`_sym `_end `eq	`loop `mark	- Loop back -
		`pop						- Pop the quoted end symbol -
		`popdictionary				- Done -
	- With the above macro, we are missing some primitives:
		- loop, which goes back to the mark
		- eq, which tests for equality.  If true, does nothing, if false, pops to mark
		- expect, which reads a symbol and throws an error if it is not equal to the symbol on the top of the stack
		- Expect could be a macro:
			`symbol `read						- Read a symbol -
			`eq `ERROREXPECT `error `mark		- Push an error if the item on the stack and read symbol aren't equal -
												- (ERROREXPECT is a hack message until we have strings) -
	- Loop is going to be a little more difficult.  What we REALLY want it to do is to re-execute everything in the
		macro after the mark.  We can't do that, though, because macros are executed line at a time, so the stack doesn't
		have a record of the macro instructions or anything.  This probably means that we can't do loop.  We're going to 
		have to make a second helper macro and call it recursively.  Something like this:
		`read `_sym `set
		`_sym `_quote
		`_sym `_end `eq `THIS `mark		- Call self recursively, how do we do that? -
		Actually, quite simply, because it's a macro it has a name, and we know what name we're going to call it!  The only thing
		keeping us from doing this is that we'd have to make a nasty helper macro that everyone could see, but that wouldn't be
		used except inside the inner macro.  If we could JUST support double quoting we wouldn't care, because the macro would
		disappear once outside of the main macro's dictionary.  So, here's what we'd LIKE to do:
		`pushdictionary
		``read ``_sym ``set
		``_sym ``_f
		``_sym ``_end ``_eq ``_helper ``mark
		`createmacro
		`_helper
		`set
		`symbol `read `_start `set
		`symbol `read `_end `set
		`symbol `read `_f `set
		`_helper
		`pop
		`popdictionary
		createmacro
		mapsyms
		set
		
Gensym:
	- Need to fix macro capture problems
	- Just necessary to generate random prefix within a dictionary that isn't likely to be used by the programmer.
	- Something like _01010394_VAR (where VAR is what the user wanted)
	- So if we defined a reader like #$foo, this would invoke the $ reader, which would create a gensym from
	the foo symbol
	- The prefix should be specific to the dictionary.  Probably the object's hash code would be fine

- Quoting
	- How do we do nested quote? (probably need an escape)
	- How do we do selective UNQUOTE in a quoted syntax?

- Chained interpreters
	- Just like chained dictionaries, we allow to push and pop an interpreter.
	- The default (first) interpreter takes input from stdin, output to stdout, and error to stderr
	- Macros are implemented by pushing an interpreter that reads from a string instead of stdin??

- Escaping
	- Want to allow a character to serve as the "symbol escape" character
	- Is the SAME as character escape sequences, including \U+xxxx unicode sequences, or different?
	- Escape has some rules:
		- Escape has its own discriminator (which by default does nothing)
		- Can configure that discriminator so that certain secondary characters do something (like emit a unicode character)
		- So I think that's what escape is: a reader that invokes the escape discriminator

- Custom disciminators

- Let's not try to interpret C-like code right away.  Let's do:
 1. Haskell-like type construction syntax
 2. LISP
 3. BASIC
 4. Pascal
 5. C-ish (like Go, with easy parse semantics)
 6. C/C#/Java

		// As stated below, reader should start from nothing. [DONE]
		// First character is the reader metachar (usually '#' but can be anything).  After that, 
		// there it would be nice if we could configure most or all of these readers from source itself.
		// In other words, what is the minimum set of "hard coded" readers.  I'm thinking the reader system
		// will end up being a stack-based system.
		//
		// I think the best way to do this is to start with single characters only.  There's an order that everything
		// has to be initialized in.  If you don't need certain features, you should be able to "not say", so we'll need
		// a "NULL" symbol.  For future compatibility with algebraic data types, it's pretty clear that this should be '_'
		// by default.
		//
		// If we do it this way, that's fine, but we need a way to document what order the characters need to be typed in.
		//
		// Lastly, when we have a way to chain environments, we need a way to "hide" symbols from the parent environment [DONE]
		//
		// Should even define syntax highlighting from the reader, so that maybe we start with:
		// ReaderType (name) gets a certain behavior and has certain "metadata", and we can start with
		// fontWeight, backgroundColor, foregroundColor.  This will have to be made more generic in the future, of 
		// course, but it will do for now.  So we declare (for example) ReaderType = name (foregroundColor = blue) and
		// then every time we read a NAME the text area will be able to see the source location and turn it blue.
		//
		// But, again, we ultimately want to hard-code as little of this as possible.

- Handle pasting chars into the editor, right now it just passes the "v" or nothing

- Define the character escape types.  By default this just lets you escape \xxxx unicode code points, 
		so we'll want a way to define the traditional \n, \r, and so forth escapes as the user sees fit.
		We want this because some languages don't use \n, etc. for their escapes, they use stuff like \Space.
		After we have this we can do things like print tabs and newlines.

- User defined types based on Product and Sum Types 

- Need a way to call "bootstrap" all over again
	- Bootstrap might push a new dictionary instead of reusing the current one
	- What are we trying to do by re-bootstrapping?  I think we're trying to clear out any syntax, but leave
	  behind the objects we've created.  This is difficult and might be best done manually.

- What do we need to implement a function macro?
	- Chained dictionaries (DONE)
	- Push and pop dictionaries (DONE)
	- Type representing all function-like invokable things
		(Ops, Macros, and Functions will all be of this type)
	- Cleanup of the execution system so it only "knows" about "Arrow Application"

- Implement readers for \U+0008 (backspace) so we can correct spelling mistakes
		- This is more complicated than it sounds.  EVERY reader needs to be able to undo at every point, and we
		need the notion of stack history.  ALL IO needs to be defined as reversible.  Then we need to implement
		"cleave points" so the user can put their cursor at any point and edit in place.  Doing so will require going
		back in time in the stack history. And reexecuting based on new edits, BUT this will require token synchronization so
		as the user is typing we don't execute a bunch of nonsense afterward.

- Opportunity for more rethinking of boostrap syntax: right now we have the "ignore operator" as the very first thing, which 
	makes it impossible for our language to start out in the literate style.  Is this OK?

- Add structural checking for is-op (structural equivalence)
- I'm pretty sure we can build cons cells from type constructors
- Built-in list type
		- Create TList (can only contain homogeneous members)
		- Lazy
		- Can create from Stack: TMark, <el>, <el>, ..., !createlist
		- Ops: head, last, tail, init, null, length
- List reader (use '()' for syntax for now)
- Create an abstraction that IOp and TMacro both inherit from? (ICallable?)
- Remainder of Haskell built-in types: Int, Double, Bool, Char
- Create type system (http://cs.wallawalla.edu/research/KU/PR/Haskell.html)
		- User-defined types as an instance of TUserType
		- Simple Type algebra for how the type is defined
		- Op to construct types from arguments
		- Op to coerce one type to another
		- Op to extract values
		- Do we want to do named type (record-like) components or pure structural types?
		  I'm leaning toward structural types.  So we'll probably need to define lists and 
		  tuples as built-in types.  Haskell-like
- replace !createlist, !createmacro, etc. with more generic syntax
- start working towards defining a basic LISP syntax
		- hard-coded "list" reader
- add accept and expect readers that take as an argument a type to accept or expect
- add integer reader
- Environment manipulation
		- env-op should push the environment bindings onto the stack as an alternating sequence of 
			objects and symbols
		- the current environment printing should be redefined as a prelude macro
		- stack-op should push a quoted version of the stack onto the stack
		- current stack printing should be changed to a way to print quoted stack elements
		- new ops to push and pop chained environments
		- way to hide symbols from the parent environments
- Java FFI... should be able to get rid of the "Print" op and probably
 	 a few others once we have that
		- http://www.javapractices.com/topic/TopicAction.do?Id=113
		- http://stackoverflow.com/questions/160970/how-do-i-invoke-a-java-method-when-given-the-method-name-as-a-string
		- Implement JavaType type so we can talk about Java Class Types
		- Add type op to push a type on the stack given its name (useful elsewhere)
		- Constructing an instance of a JavaType should cause the underlying VM to create the corresponding
			class instance (in other words, a JavaType is a UDT, but one the VM knows about)
		- Add invoke op (generic FFI)
- figure out which commands need to be built-in ops.  For example:
		* subtract, multiply, if, loop, etc.
- add a coerce command to replace the top value on the stack with the same value under the given new type
- move as many readers as possible from hard-coded to user-defined
- show unrecognized input in red
- "Talk back" to the editor
		- Configurable via command line parameter
		- Uses System.err as the communications channel
		- Writes JSON or something else simple
		- Allows for errors, warnings, diagnostic information, editor metadata (like syntax highlighting), 
			editor control (e.g. auto parens), autocomplete
